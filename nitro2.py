# -*- coding: utf-8 -*-
"""Nitro2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11H6HDRIlD8NHME1PgHNMqEpKKAXbb1nY
"""

import pandas as pd
import re
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import balanced_accuracy_score

from google.colab import files
files.upload()

import os
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle competitions download -c nitro-language-processing-3
!unzip nitro-language-processing-3.zip -d nitro

train = pd.read_csv('nitro/train.csv')
test = pd.read_csv('nitro/test.csv')

def preprocess_text(text):
    # Transformă textul în litere mici
    text = text.lower()
    # Elimină caracterele speciale folosind expresii regulate
    #text = re.sub(r'[^a-zA-Z0-9\s]', '', text)
    return text

# Combinarea titlului și conținutului
train['text'] = train['title'].fillna('') + ' ' + train['content'].fillna('')
test['text'] = test['title'].fillna('') + ' ' + test['content'].fillna('')

# Aplicarea funcției de preprocesare
train['text'] = train['text'].apply(preprocess_text)
test['text'] = test['text'].apply(preprocess_text)

tfidf = TfidfVectorizer(max_features=5000, stop_words='english', ngram_range=(1, 2))
X_train = tfidf.fit_transform(train['text'])
X_test = tfidf.transform(test['text'])

# Definirea etichetelor
y_train = train['class']

# Împărțirea datelor pentru validare
X_train_part, X_val, y_train_part, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=42)

# Antrenarea modelului Logistic Regression cu regularizare
model = LogisticRegression(C=0.1, max_iter=500)
model.fit(X_train_part, y_train_part)

y_val_pred = model.predict(X_val)
print(f'Balanced Accuracy: {balanced_accuracy_score(y_val, y_val_pred)}')

y_test_pred = model.predict(X_test)
# Prepare the submission file
y_test_pred = y_test_pred.astype(int)

submission = pd.DataFrame({'id': test['id'], 'class': y_test_pred})
submission.to_csv('submission.csv', index=False)

files.download('submission.csv')