# -*- coding: utf-8 -*-
"""Spaceship2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZLuMCLRnNtW484hUCmgPcu_X3k9T58Mw
"""

# Commented out IPython magic to ensure Python compatibility.
# Configurare Colab pentru a accesa Kaggle
from google.colab import files
files.upload()  # Încarcă kaggle.json

import os
os.makedirs('/root/.kaggle/', exist_ok=True)
!mv kaggle.json /root/.kaggle/
!chmod 600 /root/.kaggle/kaggle.json

# Descărcare date de pe Kaggle
!kaggle competitions download -c spaceship-titanic
!unzip spaceship-titanic.zip -d spaceship_titanic

# Importarea librăriilor necesare
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
# %matplotlib inline

# Încărcarea și explorarea datelor
train_df = pd.read_csv('spaceship_titanic/train.csv')
test_df = pd.read_csv('spaceship_titanic/test.csv')

# Explorare inițială
print(train_df.head())
print(train_df.info())
print(train_df.describe())

# Curățarea și preprocesarea datelor
train_df.drop(['Name', 'Cabin'], axis=1, inplace=True)
test_df.drop(['Name', 'Cabin'], axis=1, inplace=True)

train_df['HomePlanet'].fillna(train_df['HomePlanet'].mode()[0], inplace=True)
test_df['HomePlanet'].fillna(test_df['HomePlanet'].mode()[0], inplace=True)

train_df['CryoSleep'].fillna(train_df['CryoSleep'].mode()[0], inplace=True)
test_df['CryoSleep'].fillna(test_df['CryoSleep'].mode()[0], inplace=True)

train_df['Destination'].fillna(train_df['Destination'].mode()[0], inplace=True)
test_df['Destination'].fillna(test_df['Destination'].mode()[0], inplace=True)

train_df['Age'].fillna(train_df['Age'].median(), inplace=True)
test_df['Age'].fillna(test_df['Age'].median(), inplace=True)

train_df['VIP'].fillna(train_df['VIP'].mode()[0], inplace=True)
test_df['VIP'].fillna(test_df['VIP'].mode()[0], inplace=True)

# Umplerea valorilor lipsă pentru cheltuieli
train_df.fillna(0, inplace=True)
test_df.fillna(0, inplace=True)

# Convertirea variabilelor categorice
train_df['HomePlanet'] = train_df['HomePlanet'].map({'Earth': 0, 'Europa': 1, 'Mars': 2})
test_df['HomePlanet'] = test_df['HomePlanet'].map({'Earth': 0, 'Europa': 1, 'Mars': 2})

train_df['CryoSleep'] = train_df['CryoSleep'].astype(int)
test_df['CryoSleep'] = test_df['CryoSleep'].astype(int)

train_df['Destination'] = train_df['Destination'].map({'TRAPPIST-1e': 0, 'PSO J318.5-22': 1, '55 Cancri e': 2})
test_df['Destination'] = test_df['Destination'].map({'TRAPPIST-1e': 0, 'PSO J318.5-22': 1, '55 Cancri e': 2})

train_df['VIP'] = train_df['VIP'].astype(int)
test_df['VIP'] = test_df['VIP'].astype(int)

train_df['Transported'] = train_df['Transported'].astype(int)

# Separarea variabilelor de intrare și ieșire
X = train_df.drop(['Transported', 'PassengerId'], axis=1)
y = train_df['Transported']
X_test = test_df.drop(['PassengerId'], axis=1)

# Antrenarea și evaluarea modelului Random Forest
rf = RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(X, y)

# Validare încrucișată
cv_scores = cross_val_score(rf, X, y, cv=5)
print(f'Random Forest CV scores: {cv_scores}')
print(f'Average CV score: {np.mean(cv_scores)}')

# Hyperparameter Tuning cu GridSearchCV
param_grid = {
    'n_estimators': [50, 100, 200],
    'max_depth': [3, 5, 7],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4]
}

grid_search = GridSearchCV(estimator=rf, param_grid=param_grid, cv=5, n_jobs=-1, verbose=2)
grid_search.fit(X, y)

print(f'Best parameters: {grid_search.best_params_}')
print(f'Best score: {grid_search.best_score_}')

# Utilizarea celui mai bun model pentru predicții
best_model = grid_search.best_estimator_
predictions = best_model.predict(X_test)

# Salvarea predicțiilor în fișier CSV
output = pd.DataFrame({'PassengerId': test_df['PassengerId'], 'Transported': predictions})
output.to_csv('submission.csv', index=False)
print("Submission saved!")

files.download('submission.csv')