# -*- coding: utf-8 -*-
"""HugginFace.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qgKO6SYf-azn3IR0KM2SwhPZXPdANgDx
"""

# Instalează librăriile necesare
!pip install transformers datasets torch
!pip install requests==2.31.0

# Importă librăriile
from datasets import load_dataset
from transformers import AutoTokenizer, AutoModelForSequenceClassification, AdamW, get_scheduler
from torch.utils.data import DataLoader
from tqdm.auto import tqdm
import torch

# Încărcare dataset IMDb
dataset = load_dataset("imdb")

# Încărcare tokenizer pentru BERT
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Funcție pentru tokenizare
def tokenize_function(examples):
    return tokenizer(examples["text"], padding="max_length", truncation=True)

# Aplică tokenizarea pe setul de date
tokenized_datasets = dataset.map(tokenize_function, batched=True)

# Convertim toate câmpurile la tensor și ne asigurăm că includem etichetele
def format_dataset(dataset):
    dataset = dataset.remove_columns(["text"])
    dataset = dataset.rename_column("label", "labels")  # Renumește coloana label în labels
    dataset.set_format("torch")
    return dataset

train_dataset = format_dataset(tokenized_datasets["train"].shuffle(seed=42).select(range(1000)))
test_dataset = format_dataset(tokenized_datasets["test"].shuffle(seed=42).select(range(1000)))

# Crează dataloaders
train_dataloader = DataLoader(train_dataset, batch_size=8, shuffle=True)
eval_dataloader = DataLoader(test_dataset, batch_size=8)

# Încărcare model preantrenat
model = AutoModelForSequenceClassification.from_pretrained("bert-base-uncased", num_labels=2)

# Definirea optimizatorului și a funcției de pierdere
optimizer = AdamW(model.parameters(), lr=3e-5)

# Loop de antrenament
num_epochs = 3
num_training_steps = num_epochs * len(train_dataloader)
lr_scheduler = get_scheduler(
    "linear",
    optimizer=optimizer,
    num_warmup_steps=0,
    num_training_steps=num_training_steps
)

device = torch.device("cuda") if torch.cuda.is_available() else torch.device("cpu")
model.to(device)

progress_bar = tqdm(range(num_training_steps))

model.train()
for epoch in range(num_epochs):
    for batch in train_dataloader:
        # Mută batch-ul pe dispozitivul GPU
        batch = {k: v.to(device) for k, v in batch.items()}

        # Asigură-te că batch-ul are toate cheile necesare
        outputs = model(input_ids=batch['input_ids'], attention_mask=batch['attention_mask'], labels=batch['labels'])

        loss = outputs.loss
        loss.backward()

        optimizer.step()
        lr_scheduler.step()
        optimizer.zero_grad()
        progress_bar.update(1)

# Evaluarea performanței modelului
from datasets import load_metric

metric = load_metric("accuracy")

model.eval()
for batch in eval_dataloader:
    batch = {k: v.to(device) for k, v in batch.items()}
    with torch.no_grad():
        outputs = model(input_ids=batch['input_ids'], attention_mask=batch['attention_mask'], labels=batch['labels'])

    logits = outputs.logits
    predictions = torch.argmax(logits, dim=-1)
    metric.add_batch(predictions=predictions, references=batch["labels"])

accuracy = metric.compute()
print(f"Accuracy: {accuracy['accuracy']:.4f}")